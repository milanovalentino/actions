import os
import time
import re
import requests
import logging
import sys
import tempfile
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

# –ß—Ç–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.environ.get("TELEGRAM_USER_ID")

if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_USER_ID]):
    print("‚ùå –ó–∞–¥–∞–π—Ç–µ OK_EMAIL, OK_PASSWORD, TELEGRAM_BOT_TOKEN –∏ TELEGRAM_USER_ID.")
    sys.exit(1)

# –õ–æ–≥–≥–µ—Ä: –∫–æ–Ω—Å–æ–ª—å + Telegram
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        self.chat_id = chat_id
    def emit(self, record):
        try:
            requests.post(self.api_url, data={"chat_id": self.chat_id, "text": self.format(record)})
        except:
            pass

logger = logging.getLogger("okru_bot")
logger.setLevel(logging.INFO)
fmt = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(fmt)
logger.addHandler(ch)
tg = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_USER_ID)
tg.setFormatter(fmt)
logger.addHandler(tg)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver
def init_driver():
    opts = uc.ChromeOptions()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º headless, –Ω–æ –Ω–µ new (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Xvfb)
    if os.getenv('DISPLAY'):
        logger.info("üñ•Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω DISPLAY, —Ä–∞–±–æ—Ç–∞–µ–º —Å Xvfb")
    else:
        opts.add_argument('--headless=new')
        logger.info("üîá –†–∞–±–æ—Ç–∞–µ–º –≤ headless —Ä–µ–∂–∏–º–µ")
    
    opts.add_argument('--no-sandbox')
    opts.add_argument('--disable-dev-shm-usage')
    opts.add_argument('--disable-gpu')
    opts.add_argument('--window-size=1920,1080')
    opts.add_argument('--disable-extensions')
    opts.add_argument('--disable-plugins')
    opts.add_argument('--disable-web-security')
    opts.add_argument('--allow-running-insecure-content')
    opts.add_argument('--disable-popup-blocking')
    opts.add_argument('--disable-notifications')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    temp_dir = os.getenv('TEMP_VIDEO_DIR', tempfile.gettempdir())
    prefs = {
        "download.default_directory": temp_dir,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True,
        "profile.default_content_settings.popups": 0,
        "profile.default_content_setting_values.automatic_downloads": 1
    }
    opts.add_experimental_option("prefs", prefs)
    
    version_main = int(os.getenv("CHROME_MAJOR", "136"))
    
    try:
        driver = uc.Chrome(options=opts, version_main=version_main)
        logger.info(f"‚úÖ Chrome –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≤–µ—Ä—Å–∏–µ–π {version_main}")
        return driver
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –≤–µ—Ä—Å–∏–µ–π {version_main}: {e}")
        try:
            driver = uc.Chrome(options=opts)
            logger.info("‚úÖ Chrome –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏")
            return driver
        except Exception as e2:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e2}")
            raise

driver = init_driver()
wait = WebDriverWait(driver, 20)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
def take_screenshot(name="error"):
    try:
        timestamp = int(time.time())
        filename = f"{name}_{timestamp}.png"
        driver.save_screenshot(filename)
        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")
        return None

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç –≤ Telegram
def send_post_link_to_telegram(post_link):
    try:
        full_url = f"https://ok.ru{post_link}" if post_link.startswith('/') else post_link
        message = f"‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: {full_url}"
        api_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        response = requests.post(api_url, data={
            "chat_id": TELEGRAM_USER_ID, 
            "text": message
        })
        if response.json().get('ok'):
            logger.info(f"üì§ –°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ Telegram: {full_url}")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –≤ Telegram: {e}")

# –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
def wait_for_post_link(timeout=30):
    try:
        logger.info("‚è≥ –ò—â—É —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç...")
        tip_selectors = [
            "#hook_Block_TipBlock .js-tip-block-url",
            ".tip-block_lk a.js-tip-block-url",
            ".action-tip a[href*='/topic/']",
            ".toast a[href*='/topic/']"
        ]
        for i in range(timeout):
            for selector in tip_selectors:
                try:
                    elems = driver.find_elements(By.CSS_SELECTOR, selector)
                    for el in elems:
                        if el.is_displayed():
                            link = el.get_attribute("href")
                            if link and "/topic/" in link:
                                logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç: {link}")
                                return link
                except:
                    continue
            time.sleep(1)
            if i % 10 == 0 and i > 0:
                logger.info(f"‚è≥ –ü–æ–∏—Å–∫ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç... ({i}/{timeout} —Å–µ–∫)")
        logger.warning("‚ö†Ô∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞")
        return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç: {e}")
        return None

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
def try_confirm_identity():
    try:
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@value='Yes, confirm']"
            " | //button[contains(text(),'Yes, confirm')]"
            " | //button[contains(text(),'–î–∞, —ç—Ç–æ —è')]"
        )))
        btn.click()
        logger.info("üîì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å")
        time.sleep(1)
    except Exception:
        logger.info("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞")

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ —Ñ—É–Ω–∫—Ü–∏–∏ post_to_group ...

def post_to_group(group_url, video_file=None, video_url=None, text=""):
    post_url = group_url.rstrip('/') + '/post'
    logger.info("üöÄ –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∏–Ω–≥–∞")
    try:
        driver.get(post_url)
        time.sleep(3)
        box = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,
            "div[contenteditable='true']"
        )))
        box.click()
        # ... –∫–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –∏–ª–∏ –≤—Å—Ç–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –∏ —Ç–µ–∫—Å—Ç–∞ ...
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        share_button = driver.find_element(By.CSS_SELECTOR, "button.js-pf-submit-btn[data-action='submit']")
        is_disabled = share_button.get_attribute("disabled") is not None
        if is_disabled:
            logger.error("‚ùå –ö–Ω–æ–ø–∫–∞ Share –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ - –Ω–µ –º–æ–≥—É –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å")
            take_screenshot("share_button_disabled_before_publish")
            return
        # –ü—É–±–ª–∏–∫—É–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É
        share_button.click()
        logger.info("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
        # –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
        post_link = wait_for_post_link(timeout=30)
        if post_link:
            send_post_link_to_telegram(post_link)
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç")
        time.sleep(5)
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –≥—Ä—É–ø–ø—É {group_url}: {e}")
        take_screenshot("post_general_error")

# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
def main():
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É")
        driver.get("https://ok.ru/")
        wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(EMAIL)
        driver.find_element(By.NAME,'st.password').send_keys(PASSWORD)
        logger.info("üîë –õ–æ–≥–∏–Ω")
        driver.find_element(By.CSS_SELECTOR, "input[type='submit']").click()
        time.sleep(2)
        try_confirm_identity()
        # SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∏ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —à–∞–≥–∏ –ª–æ–≥–∏–Ω–∞
        try_sms_verification()
        logger.info("üéâ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        groups = retrieve_groups()
        video_file, video_url, post_text = retrieve_post_info()

        for i, g in enumerate(groups, 1):
            logger.info(f"üìù –ü—É–±–ª–∏–∫—É—é –≤ –≥—Ä—É–ø–ø—É {i}/{len(groups)}: {g}")
            post_to_group(g, video_file, video_url, post_text)
            if i < len(groups):
                time.sleep(3)

        # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if video_file and os.path.exists(video_file):
            try:
                os.unlink(video_file)
                logger.info("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")
        temp_dir = os.getenv('TEMP_VIDEO_DIR', tempfile.gettempdir())
        if temp_dir != tempfile.gettempdir():
            try:
                import shutil
                if os.path.exists(temp_dir):
                    shutil.rmtree(temp_dir)
                    logger.info("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {e}")

        logger.info("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        driver.quit()
        logger.info("üîí –ó–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == '__main__':
    main()
