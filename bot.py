import os
import time
import re
import requests
import logging
import sys
import tempfile
import undetected_chromedriver as uc
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

# –ß—Ç–µ–Ω–∏–µ —É—á—ë—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
EMAIL = os.environ.get("OK_EMAIL")
PASSWORD = os.environ.get("OK_PASSWORD")
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_BOT_TOKEN")
TELEGRAM_USER_ID = os.environ.get("TELEGRAM_USER_ID")

if not all([EMAIL, PASSWORD, TELEGRAM_TOKEN, TELEGRAM_USER_ID]):
    print("‚ùå –ó–∞–¥–∞–π—Ç–µ OK_EMAIL, OK_PASSWORD, TELEGRAM_BOT_TOKEN –∏ TELEGRAM_USER_ID.")
    sys.exit(1)

# –õ–æ–≥–≥–µ—Ä: –∫–æ–Ω—Å–æ–ª—å + Telegram
class TelegramHandler(logging.Handler):
    def __init__(self, token, chat_id):
        super().__init__()
        self.api_url = f"https://api.telegram.org/bot{token}/sendMessage"
        self.chat_id = chat_id
    def emit(self, record):
        try:
            requests.post(self.api_url, data={"chat_id": self.chat_id, "text": self.format(record)})
        except:
            pass

logger = logging.getLogger("okru_bot")
logger.setLevel(logging.INFO)
fmt = logging.Formatter("%(asctime)s | %(levelname)s | %(message)s")
ch = logging.StreamHandler(sys.stdout)
ch.setFormatter(fmt)
logger.addHandler(ch)
tg = TelegramHandler(TELEGRAM_TOKEN, TELEGRAM_USER_ID)
tg.setFormatter(fmt)
logger.addHandler(tg)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebDriver
def init_driver():
    opts = uc.ChromeOptions()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º headless, –Ω–æ –Ω–µ new (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Xvfb)
    if os.getenv('DISPLAY'):
        # –ï—Å–ª–∏ –µ—Å—Ç—å DISPLAY (Xvfb), –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º headless
        logger.info("üñ•Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω DISPLAY, —Ä–∞–±–æ—Ç–∞–µ–º —Å Xvfb")
    else:
        opts.add_argument('--headless=new')
        logger.info("üîá –†–∞–±–æ—Ç–∞–µ–º –≤ headless —Ä–µ–∂–∏–º–µ")
    
    opts.add_argument('--no-sandbox')
    opts.add_argument('--disable-dev-shm-usage')
    opts.add_argument('--disable-gpu')
    opts.add_argument('--window-size=1920,1080')
    opts.add_argument('--disable-extensions')
    opts.add_argument('--disable-plugins')
    opts.add_argument('--disable-web-security')
    opts.add_argument('--allow-running-insecure-content')
    opts.add_argument('--disable-popup-blocking')
    opts.add_argument('--disable-notifications')
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    temp_dir = os.getenv('TEMP_VIDEO_DIR', tempfile.gettempdir())
    prefs = {
        "download.default_directory": temp_dir,
        "download.prompt_for_download": False,
        "download.directory_upgrade": True,
        "safebrowsing.enabled": True,
        "profile.default_content_settings.popups": 0,
        "profile.default_content_setting_values.automatic_downloads": 1
    }
    opts.add_experimental_option("prefs", prefs)
    
    version_main = int(os.getenv("CHROME_MAJOR", "136"))
    
    try:
        driver = uc.Chrome(options=opts, version_main=version_main)
        logger.info(f"‚úÖ Chrome –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –≤–µ—Ä—Å–∏–µ–π {version_main}")
        return driver
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞ —Å –≤–µ—Ä—Å–∏–µ–π {version_main}: {e}")
        try:
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏
            driver = uc.Chrome(options=opts)
            logger.info("‚úÖ Chrome –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä—Å–∏–∏")
            return driver
        except Exception as e2:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥—Ä–∞–π–≤–µ—Ä–∞: {e2}")
            raise

driver = init_driver()
wait = WebDriverWait(driver, 20)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
def take_screenshot(name="error"):
    try:
        timestamp = int(time.time())
        filename = f"{name}_{timestamp}.png"
        driver.save_screenshot(filename)
        logger.info(f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        return filename
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")
        return None

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ª–∏—á–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
def try_confirm_identity():
    try:
        btn = wait.until(EC.element_to_be_clickable((By.XPATH,
            "//input[@value='Yes, confirm']"
            " | //button[contains(text(),'Yes, confirm')]"
            " | //button[contains(text(),'–î–∞, —ç—Ç–æ —è')]"
        )))
        btn.click()
        logger.info("üîì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –ª–∏—á–Ω–æ—Å—Ç—å")
        time.sleep(1)
    except Exception:
        logger.info("‚ÑπÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏ –Ω–µ –ø–æ–∫–∞–∑–∞–Ω–∞")

# –ü–æ–ª—É—á–µ–Ω–∏–µ SMS-–∫–æ–¥–∞ –∏–∑ Telegram
def retrieve_sms_code(timeout=120, poll=5):
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last = None
    try:
        init = requests.get(api, params={'timeout':0}).json()
        ids = [u['update_id'] for u in init.get('result', [])]
        last = max(ids)+1 if ids else None
    except:
        pass
    deadline = time.time() + timeout
    logger.info("‚è≥ –û–∂–∏–¥–∞—é SMS-–∫–æ–¥")
    while time.time() < deadline:
        try:
            resp = requests.get(api, params={'timeout':0,'offset': last}).json()
        except:
            time.sleep(poll)
            continue
        if not resp.get('ok'):
            time.sleep(poll)
            continue
        for upd in resp['result']:
            last = upd['update_id'] + 1
            msg = upd.get('message') or upd.get('edited_message')
            if not msg or str(msg.get('chat',{}).get('id')) != TELEGRAM_USER_ID:
                continue
            txt = msg.get('text','').strip()
            m = re.match(r"^(?:#–∫–æ–¥\s*)?(\d{4,6})$", txt, re.IGNORECASE)
            if m:
                code = m.group(1)
                logger.info("‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω")
                return code
        time.sleep(poll)
    logger.error("‚ùå –¢–∞–π–º–∞—É—Ç SMS-–∫–æ–¥–∞")
    raise TimeoutException("SMS-–∫–æ–¥ –Ω–µ –ø–æ–ª—É—á–µ–Ω")

# SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
def try_sms_verification():
    data_l = driver.find_element(By.TAG_NAME,'body').get_attribute('data-l') or ''
    if 'userMain' in data_l and 'anonymMain' not in data_l:
        logger.info("‚úÖ –£–∂–µ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω")
        return
    logger.info("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é SMS-–∫–æ–¥")
    btn = wait.until(EC.element_to_be_clickable((By.XPATH,
        "//input[@type='submit' and @value='Get code']"
    )))
    btn.click()
    time.sleep(1)
    if 'too often' in driver.find_element(By.TAG_NAME,'body').text.lower():
        logger.error("üõë Rate limit")
        sys.exit(1)
    inp = wait.until(EC.presence_of_element_located((By.XPATH,
        "//input[@id='smsCode' or contains(@name,'smsCode')]"
    )))
    code = retrieve_sms_code()
    inp.clear()
    inp.send_keys(code)
    logger.info("‚úçÔ∏è –í–≤—ë–ª SMS-–∫–æ–¥")
    next_btn = driver.find_element(By.XPATH,
        "//input[@type='submit' and @value='Next']"
    )
    next_btn.click()
    logger.info("‚úÖ SMS-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

# –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Telegram
def download_file_from_telegram(file_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_info_url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getFile"
        response = requests.get(file_info_url, params={'file_id': file_id})
        file_info = response.json()
        
        if not file_info.get('ok'):
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ: {file_info}")
            return None
        
        file_size = file_info['result'].get('file_size', 0)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ª–∏–º–∏—Ç Telegram Bot API - 20MB)
        if file_size > 20 * 1024 * 1024:
            logger.error(f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π: {file_size} –±–∞–π—Ç (–ª–∏–º–∏—Ç 20MB)")
            return None
            
        file_path = file_info['result']['file_path']
        file_url = f"https://api.telegram.org/file/bot{TELEGRAM_TOKEN}/{file_path}"
        
        logger.info(f"üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {file_size} –±–∞–π—Ç")
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        file_response = requests.get(file_url, timeout=60)
        if file_response.status_code == 200:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è GitHub Actions
            temp_dir = os.getenv('TEMP_VIDEO_DIR', tempfile.gettempdir())
            os.makedirs(temp_dir, exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            temp_file = tempfile.NamedTemporaryFile(
                delete=False, 
                suffix=os.path.splitext(file_path)[1],
                dir=temp_dir
            )
            temp_file.write(file_response.content)
            temp_file.close()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–ª—Å—è
            if os.path.exists(temp_file.name):
                actual_size = os.path.getsize(temp_file.name)
                logger.info(f"‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω: {temp_file.name} ({actual_size} –±–∞–π—Ç)")
                return temp_file.name
            else:
                logger.error("‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                return None
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {file_response.status_code}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

# –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã #–≥—Ä—É–ø–ø—ã –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ URL –≥—Ä—É–ø–ø
def retrieve_groups(poll=5):
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last = None
    try:
        init = requests.get(api, params={'timeout':0}).json()
        ids = [u['update_id'] for u in init.get('result', [])]
        last = max(ids)+1 if ids else None
    except:
        pass
    logger.info("‚è≥ –ñ–¥—É –∫–æ–º–∞–Ω–¥—É #–≥—Ä—É–ø–ø—ã")
    while True:
        resp = requests.get(api, params={'timeout':0,'offset': last}).json()
        if resp.get('ok'):
            for u in resp['result']:
                last = u['update_id'] + 1
                msg = u.get('message') or {}
                if str(msg.get('chat',{}).get('id')) != TELEGRAM_USER_ID:
                    continue
                txt = msg.get('text','').strip()
                m = re.match(r"#–≥—Ä—É–ø–ø—ã\s+(.+)", txt, re.IGNORECASE)
                if m:
                    urls = re.findall(r"https?://ok\.ru/group/\d+/?", m.group(1))
                    if urls:
                        logger.info("‚úÖ –ì—Ä—É–ø–ø—ã –ø–æ–ª—É—á–µ–Ω—ã")
                        return urls
        time.sleep(poll)

# –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã #–ø–æ—Å—Ç –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤–∏–¥–µ–æ/—Ç–µ–∫—Å—Ç–∞
def retrieve_post_info(poll=5):
    api = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/getUpdates"
    last = None
    try:
        init = requests.get(api, params={'timeout':0}).json()
        ids = [u['update_id'] for u in init.get('result', [])]
        last = max(ids)+1 if ids else None
    except:
        pass
    logger.info("‚è≥ –ñ–¥—É –∫–æ–º–∞–Ω–¥—É #–ø–æ—Å—Ç")
    while True:
        resp = requests.get(api, params={'timeout':0,'offset': last}).json()
        if resp.get('ok'):
            for u in resp['result']:
                last = u['update_id'] + 1
                msg = u.get('message') or {}
                if str(msg.get('chat',{}).get('id')) != TELEGRAM_USER_ID:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–æ–º–∞–Ω–¥–∞ #–ø–æ—Å—Ç –≤ —Ç–µ–∫—Å—Ç–µ
                txt = msg.get('text', '').strip()
                caption = msg.get('caption', '').strip()
                
                # –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É –≤ —Ç–µ–∫—Å—Ç–µ –∏–ª–∏ –ø–æ–¥–ø–∏—Å–∏
                post_match = None
                if txt:
                    post_match = re.match(r"#–ø–æ—Å—Ç\s*(.*)", txt, re.IGNORECASE)
                elif caption:
                    post_match = re.match(r"#–ø–æ—Å—Ç\s*(.*)", caption, re.IGNORECASE)
                
                if post_match:
                    post_text = post_match.group(1).strip() if post_match.group(1) else ""
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ
                    video_file = None
                    video_url = None
                    
                    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª
                    if 'video' in msg:
                        video_info = msg['video']
                        file_id = video_info['file_id']
                        logger.info("üìπ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                        video_file = download_file_from_telegram(file_id)
                    
                    # –ï—Å–ª–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞ –Ω–µ—Ç, –∏—â–µ–º —Å—Å—ã–ª–∫—É –≤ —Ç–µ–∫—Å—Ç–µ
                    if not video_file:
                        full_text = (txt + " " + caption + " " + post_text).strip()
                        url_match = re.search(r"https?://\S+", full_text)
                        if url_match:
                            video_url = url_match.group(0)
                            post_text = full_text.replace(video_url, "").replace("#–ø–æ—Å—Ç", "").strip()
                            logger.info("üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ")
                    
                    if video_file or video_url:
                        logger.info("‚úÖ –ü–æ—Å—Ç-–∏–Ω—Ñ–æ –ø–æ–ª—É—á–µ–Ω–æ")
                        return video_file, video_url, post_text
                    else:
                        logger.warning("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ –∏–ª–∏ —Å—Å—ã–ª–∫–∏ –≤ –∫–æ–º–∞–Ω–¥–µ #–ø–æ—Å—Ç")
        
        time.sleep(poll)

# –ü–æ—Å—Ç–∏–Ω–≥ –≤ –≥—Ä—É–ø–ø—É (—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞) !!!
def post_to_group(group_url, video_file=None, video_url=None, text=""):
    post_url = group_url.rstrip('/') + '/post'
    logger.info("üöÄ –û—Ç–∫—Ä—ã–≤–∞—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å—Ç–∏–Ω–≥–∞")
    
    try:
        driver.get(post_url)
        time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
        
        # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        box = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR,
            "div[contenteditable='true']"
        )))
        box.click()
        logger.info("‚úÖ –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–æ")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ
        if video_file and os.path.exists(video_file):
            try:
                logger.info(f"üì§ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞: {video_file}")
                file_size = os.path.getsize(video_file)
                logger.info(f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
                
                # –®–∞–≥ 1: –ù–∞—Ö–æ–¥–∏–º –∏ –∫–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É "Video"
                video_button_selectors = [
                    "div[data-l='t,button.video'] .posting_ac_i",
                    "div[data-l*='button.video']",
                    ".js-video-btn",
                    "div[title='Add video']",
                    "div[aria-label='Add video']"
                ]
                
                video_button = None
                for selector in video_button_selectors:
                    try:
                        video_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                        if video_button.is_displayed():
                            logger.info(f"üé¨ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Video: {selector}")
                            break
                    except:
                        continue
                
                if not video_button:
                    logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ Video")
                    take_screenshot("no_video_button")
                    return
                
                # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É Video
                video_button.click()
                logger.info("üé¨ –ö–ª–∏–∫–Ω—É–ª –Ω–∞ –∫–Ω–æ–ø–∫—É Video")
                time.sleep(3)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                
                # –®–∞–≥ 2: –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∏ –∏—â–µ–º input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
                upload_input = None
                upload_input_selectors = [
                    ".js-fileapi-input.video-upload-input",
                    "input.video-upload-input",
                    ".video-upload-wrapper input[type='file']",
                    ".js-upload-button input[type='file']",
                    "input[type='file'][accept*='video']"
                ]
                
                for selector in upload_input_selectors:
                    try:
                        upload_input = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, selector)))
                        if upload_input:
                            logger.info(f"üì§ –ù–∞–π–¥–µ–Ω input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏: {selector}")
                            break
                    except:
                        continue
                
                if not upload_input:
                    logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω input –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞")
                    take_screenshot("no_upload_input")
                    return
                
                # –®–∞–≥ 3: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
                logger.info("üì§ –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ—Ñ–∞–π–ª —á–µ—Ä–µ–∑ input")
                upload_input.send_keys(video_file)
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
                wait_time = min(60, max(15, file_size // (1024 * 1024)))  # 1 —Å–µ–∫ –Ω–∞ MB, –º–∏–Ω 15, –º–∞–∫—Å 60
                logger.info(f"‚è≥ –ñ–¥—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ ({wait_time} —Å–µ–∫)...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
                upload_success = False
                initial_check_passed = False
                
                for i in range(wait_time):
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–∞—á–∞–ª –∑–∞–≥—Ä—É–∂–∞—Ç—å—Å—è (–∏—Å—á–µ–∑ input –∏–ª–∏ –ø–æ—è–≤–∏–ª—Å—è –ø—Ä–æ–≥—Ä–µ—Å—Å)
                        if not initial_check_passed:
                            upload_elements = driver.find_elements(By.CSS_SELECTOR, ".js-fileapi-input.video-upload-input")
                            progress_elements = driver.find_elements(By.CSS_SELECTOR, ".upload-progress, .progress, [class*='progress'], .loading")
                            
                            if not upload_elements or progress_elements:
                                initial_check_passed = True
                                logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å")
                        
                        # –ò—â–µ–º –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                        success_selectors = [
                            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                            ".video-upload-success",
                            ".upload-complete", 
                            ".video-preview",
                            ".media-preview",
                            "div[data-state='uploaded']",
                            ".upload-progress[style*='100%']",
                            # –°–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è OK.ru
                            ".video-card",
                            ".vid-card", 
                            ".media-card",
                            ".attachment-video",
                            "div[class*='video'][class*='card']",
                            "div[class*='media'][class*='preview']",
                            # –ö–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                            "button[data-action='submit']:enabled",
                            ".button-pro[data-action='submit']:enabled",
                            "input[type='submit']:enabled"
                        ]
                        
                        for selector in success_selectors:
                            elements = driver.find_elements(By.CSS_SELECTOR, selector)
                            if elements:
                                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —ç–ª–µ–º–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∏–º—ã–º
                                for elem in elements:
                                    if elem.is_displayed():
                                        upload_success = True
                                        logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏: {selector}")
                                        break
                                if upload_success:
                                    break
                        
                        if upload_success:
                            break
                            
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –æ—à–∏–±–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
                        error_selectors = [
                            ".upload-error",
                            ".error-message", 
                            "div[data-state='error']",
                            ".error",
                            "[class*='error']"
                        ]
                        
                        for selector in error_selectors:
                            error_elements = driver.find_elements(By.CSS_SELECTOR, selector)
                            if error_elements:
                                for error_elem in error_elements:
                                    if error_elem.is_displayed() and error_elem.text.strip():
                                        error_text = error_elem.text
                                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {error_text}")
                                        take_screenshot("upload_error")
                                        return
                        
                        time.sleep(1)
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                        if i % 10 == 0 and i > 0:
                            logger.info(f"‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞... ({i}/{wait_time} —Å–µ–∫)")
                            
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
                        time.sleep(1)
                        continue
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —è–≤–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤, –Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å - —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π
                if not upload_success and initial_check_passed:
                    logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å, —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
                    upload_success = True
                
                if upload_success:
                    logger.info("‚úÖ –í–∏–¥–µ–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
                    
                    # –ò—â–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
                    modal_close_selectors = [
                        "button[data-action='close']",
                        "button[data-action='submit']",
                        ".button-pro[data-action='submit']",
                        ".modal-footer button",
                        "button.js-submit",
                        "button:enabled"
                    ]
                    
                    for selector in modal_close_selectors:
                        try:
                            close_buttons = driver.find_elements(By.CSS_SELECTOR, selector)
                            for close_button in close_buttons:
                                if close_button.is_displayed() and close_button.is_enabled():
                                    close_button.click()
                                    logger.info("‚úÖ –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ")
                                    time.sleep(2)
                                    break
                            else:
                                continue
                            break
                        except:
                            continue
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ")
                    analyze_upload_state()  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    take_screenshot("video_upload_timeout")
                    # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ - –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ –∂–µ –ø—Ä–æ—à–ª–∞
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞: {e}")
                take_screenshot("video_upload_error")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ, –≤—Å—Ç–∞–≤–ª—è–µ–º –µ—ë
        elif video_url:
            box.clear()
            box.send_keys(video_url)
            box.send_keys(Keys.SPACE)
            logger.info("‚úçÔ∏è –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –≤—Å—Ç–∞–≤–ª–µ–Ω–∞")
            
            # –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –ø—Ä–µ–≤—å—é
            attached = False
            for i in range(10):
                preview_selectors = [
                    "div.vid-card.vid-card__xl",
                    "div.mediaPreview", 
                    "div.mediaFlex", 
                    "div.preview_thumb"
                ]
                
                for selector in preview_selectors:
                    if driver.find_elements(By.CSS_SELECTOR, selector):
                        attached = True
                        break
                
                if attached:
                    break
                time.sleep(1)
                
            if attached:
                logger.info("‚úÖ –í–∏–¥–µ–æ-–∫–∞—Ä—Ç–∞ –ø–æ—è–≤–∏–ª–∞—Å—å")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ –¥–æ–∂–¥–∞–ª—Å—è –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–∏–¥–µ–æ –∑–∞ 10 —Å–µ–∫ –Ω–∞ {group_url}")
                take_screenshot("video_card_timeout")

        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        if text:
            # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Å–Ω–æ–≤–∞ (–º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ)
            try:
                text_box = driver.find_element(By.CSS_SELECTOR, "div[contenteditable='true']")
                text_box.click()
                
                # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –≤ –ø–æ–ª–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                if video_url:
                    text_box.send_keys(" " + text)
                else:
                    text_box.send_keys(text)
                logger.info("‚úçÔ∏è –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e}")

        # –ü—É–±–ª–∏–∫—É–µ–º
        try:
            publish_selectors = [
                "button.js-pf-submit-btn[data-action='submit']",
                "button[data-action='submit']",
                "input[type='submit'][value*='–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å']",
                "input[type='submit'][value*='–ü—É–±–ª–∏–∫–æ–≤–∞—Ç—å']",
                "button[type='submit']",
                ".posting_submit input[type='submit']"
            ]
            
            btn = None
            for selector in publish_selectors:
                try:
                    btn = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, selector)))
                    if btn.is_displayed() and btn.is_enabled():
                        break
                except:
                    continue
            
            if btn:
                btn.click()
                logger.info("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
                time.sleep(5)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            else:
                logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                take_screenshot("no_publish_button")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            take_screenshot("publish_error")
            
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø–æ—Å—Ç–∏–Ω–≥–∞ –≤ –≥—Ä—É–ø–ø—É {group_url}: {e}")
        take_screenshot("post_general_error")

# –û—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
def main():
    try:
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É")
        driver.get("https://ok.ru/")
        wait.until(EC.presence_of_element_located((By.NAME,'st.email'))).send_keys(EMAIL)
        driver.find_element(By.NAME,'st.password').send_keys(PASSWORD)
        logger.info("üîë –õ–æ–≥–∏–Ω")
        driver.find_element(By.CSS_SELECTOR, "input[type='submit']").click()
        time.sleep(2)
        try_confirm_identity()
        try_sms_verification()
        logger.info("üéâ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω")

        groups = retrieve_groups()
        video_file, video_url, post_text = retrieve_post_info()
        
        for g in groups:
            post_to_group(g, video_file, video_url, post_text)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω –±—ã–ª —Å–æ–∑–¥–∞–Ω
        if video_file and os.path.exists(video_file):
            try:
                os.unlink(video_file)
                logger.info("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {e}")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        temp_dir = os.getenv('TEMP_VIDEO_DIR', tempfile.gettempdir())
        if temp_dir != tempfile.gettempdir():  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –ø–∞–ø–∫—É
            try:
                import shutil
                if os.path.exists(temp_dir):
                    shutil.rmtree(temp_dir)
                    logger.info("üóëÔ∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –æ—á–∏—â–µ–Ω–∞")
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É: {e}")

        logger.info("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"üî• –û—à–∏–±–∫–∞: {e}")
        sys.exit(1)
    finally:
        driver.quit()
        logger.info("üîí –ó–∞–≤–µ—Ä—à–µ–Ω–æ")

if __name__ == '__main__':
    main()
